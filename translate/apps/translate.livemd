<!-- livebook:{"app_settings":{"access_type":"public","output_type":"rich","slug":"translate"}} -->

# Translation Comparison App

```elixir
Mix.install([
  {:kino, "~> 0.14.2"},
  {:deepl_ex, "~> 0.4.0"},
  {:google_api_translate, "~> 0.21.0"}
])
```

## Configuration

```elixir
# Configure DeepL API key - using Livebook secrets
Application.put_env(:deepl_ex, :api_key, System.fetch_env!("LB_DEEPL_API_KEY"))

# Configure Google Translate API key - using Livebook secrets
System.fetch_env!("LB_GOOGLE_API_KEY")
```

## Translation Logic

```elixir
defmodule Translator do
  def translate_with_deepl(text) do
    case DeeplEx.translate(text, :EN, :PL) do
      {:ok, translation} -> translation
      {:error, reason} -> "Error with DeepL: #{inspect(reason)}"
    end
  end

  def translate_with_google(text) do
    conn = GoogleApi.Translate.V2.Connection.new()
    case GoogleApi.Translate.V2.Api.Translations.language_translations_list(conn, text, "pl", [
           {:source, "en"},
           {:key, System.fetch_env!("LB_GOOGLE_API_KEY")}
         ]) do
      {:ok, translation} -> hd(translation.translations).translatedText
      {:error, reason} -> "Error with Google: #{inspect(reason)}"
    end
  end
end
```

## User Interface

```elixir
# Create input form for the English text
form = Kino.Control.form(
  [
    text: Kino.Input.text("Enter English text")
  ],
  submit: "Translate"
)
```

```elixir
# Create frame for displaying results
result_frame = Kino.Frame.new()

form
|> Kino.Control.stream()
|> Kino.listen(fn %{data: %{text: english_text}} ->
  google_translation = Translator.translate_with_google(english_text)
  deepl_translation = Translator.translate_with_deepl(english_text)

  content =
    Kino.Layout.grid(
      [
        Kino.Markdown.new("""
        ### Original Text
        #{english_text}
        """),
        Kino.Markdown.new("""
        ### Google Translate
        #{google_translation}
        """),
        Kino.Markdown.new("""
        ### DeepL
        #{deepl_translation}
        """)
      ],
      columns: 3
    )

  Kino.Frame.render(result_frame, content)
end)

result_frame
```

<!-- livebook:{"offset":2135,"stamp":{"token":"XCP.HoD4eP85GWrDLaFKaZ70LWKgpTUN2kNWl10caon5ivPM0OF_M1F1q4KBDFC_Vy1cr0yC2d5I2hVX9gp-y3IT9NybVKhTkBP_KYdpF_H5x478BrjY6IiNCRNITFIdM_bqmXBygVrlC1QdRhrQ_J628bctLcFLprn_cy50Jipj0Dg","version":2}} -->

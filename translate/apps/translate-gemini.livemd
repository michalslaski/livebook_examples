Mix.install([
  {:kino, "~> 0.9.4"},
  {:google_translate, "~> 0.4"},
  {:deepl, "~> 0.6.0"},
  {:req, "~> 0.4.2"},
  {:nx, "~> 0.6.1", override: true},
  {:exla, "~> 0.6.1"}
])

# API Keys (Replace with your keys)
google_translate_api_key = "YOUR_GOOGLE_TRANSLATE_API_KEY"
deepl_api_key = "YOUR_DEEPL_API_KEY"

# Kino Form for Input
phrase_input = Kino.Input.textarea("Enter phrase to translate (English):", default: "Hello, how are you?")
button = Kino.Control.button("Translate")
form = Kino.Control.form([phrase: phrase_input], submit: button)

# Display the Form
form

# Function to translate using Google Translate
defp translate_google(phrase, api_key) do
  with {:ok, translated_text} <-
         GoogleTranslate.translate(phrase, from: "en", to: "pl", key: api_key) do
    translated_text
  else
    {:error, error} ->
      "Google Translate Error: #{error}"
  end
end

# Function to translate using DeepL
defp translate_deepl(phrase, api_key) do
  translator = DeepLx.Translator.new(auth_key: api_key)

  with {:ok, result} <- DeepLx.translate(translator, phrase, "PL", "EN") do
    result.translations |> List.first() |> Map.get(:text)
  else
    {:error, error} ->
      "DeepL Error: #{error}"
  end
end

# Event Handler for Form Submission
Kino.Control.stream(form, fn %{data: %{phrase: phrase}} ->
  # Translate using both APIs
  google_translation = translate_google(phrase, google_translate_api_key)
  deepl_translation = translate_deepl(phrase, deepl_api_key)

  # Display Results using Kino.Markdown
  Kino.Markdown.new("""
  ## Translation Results:

  **Original Phrase:** #{phrase}

  **Google Translate:** #{google_translation}

  **DeepL:** #{deepl_translation}
  """)
  |> Kino.Control.broadcast(form)
end)
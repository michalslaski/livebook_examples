Mix.install([
  {:kino, "~> 0.11.0"},
  {:google_translator, "~> 0.2"},
  {:deepl, "~> 1.2"}
])

# Configure DeepL API key
deepl_key_input = Kino.Input.password("DeepL API Key")
deepl_api_key = Kino.Input.read(deepl_key_input)

# Configure Google Translate API key
google_key_input = Kino.Input.password("Google Translate API Key")
google_api_key = Kino.Input.read(google_key_input)

# Configure DeepL client
DeepL.configure(api_key: deepl_api_key)

# Configure Google Translate client
GoogleTranslator.configure(api_key: google_api_key)

defmodule Translator do
  def translate_with_google(text) do
    case GoogleTranslator.translate(text, from: "en", to: "pl") do
      {:ok, translation} -> translation
      {:error, reason} -> "Error with Google Translate: #{inspect(reason)}"
    end
  end

  def translate_with_deepl(text) do
    case DeepL.translate(text, source_lang: "EN", target_lang: "PL") do
      {:ok, translation} -> translation.text
      {:error, reason} -> "Error with DeepL: #{inspect(reason)}"
    end
  end
end

# Create input form for the English text
form = Kino.Control.form(
  [
    text: Kino.Input.text("Enter English text")
  ],
  submit: "Translate"
)

# Create frame for displaying results
result_frame = Kino.Frame.new()

form
|> Kino.Control.stream()
|> Kino.listen(fn %{data: %{text: english_text}} ->
  google_translation = Translator.translate_with_google(english_text)
  deepl_translation = Translator.translate_with_deepl(english_text)

  content = Kino.Markdown.new("""
  ## Translation Results

  **Original Text:** #{english_text}

  ### Google Translate
  #{google_translation}

  ### DeepL
  #{deepl_translation}
  """)

  Kino.Frame.render(result_frame, content)
end)

result_frame
<!-- livebook:{"app_settings":{"access_type":"public","output_type":"rich","show_source":false,"slug":"translate-sonnet"}} -->

# Translation Comparison App

```elixir
Mix.install([
  {:kino, "~> 0.11.0"},
  {:google_translator, "~> 0.2"},
  {:deepl, "~> 1.2"}
])
```

## Configuration

<!-- livebook:{"smart_cell":true} -->
```elixir
# Configure DeepL API key - using Livebook secrets
deepl_api_key = System.fetch_env!("LB_DEEPL_API_KEY")
# Configure Google Translate API key - using Livebook secrets
google_api_key = System.fetch_env!("LB_GOOGLE_API_KEY")

# Configure clients
DeepL.configure(api_key: deepl_api_key)
GoogleTranslator.configure(api_key: google_api_key)
```

## Translation Logic

```elixir
defmodule Translator do
  def translate_with_google(text) do
    case GoogleTranslator.translate(text, from: "en", to: "pl") do
      {:ok, translation} -> translation
      {:error, reason} -> "Error with Google Translate: #{inspect(reason)}"
    end
  end

  def translate_with_deepl(text) do
    case DeepL.translate(text, source_lang: "EN", target_lang: "PL") do
      {:ok, translation} -> translation.text
      {:error, reason} -> "Error with DeepL: #{inspect(reason)}"
    end
  end
end
```

## User Interface

```elixir
# Create input form for the English text
form = Kino.Control.form(
  [
    text: Kino.Input.text("Enter English text")
  ],
  submit: "Translate"
)

# Create frame for displaying results
result_frame = Kino.Frame.new()

form
|> Kino.Control.stream()
|> Kino.listen(fn %{data: %{text: english_text}} ->
  google_translation = Translator.translate_with_google(english_text)
  deepl_translation = Translator.translate_with_deepl(english_text)

  content = Kino.Markdown.new("""
  ## Translation Results

  **Original Text:** #{english_text}

  ### Google Translate
  #{google_translation}

  ### DeepL
  #{deepl_translation}
  """)

  Kino.Frame.render(result_frame, content)
end)

result_frame
```